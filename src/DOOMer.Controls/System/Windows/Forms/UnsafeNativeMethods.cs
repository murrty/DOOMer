//----------------------
// <auto-generated>
//     Backwards compatibility with Menus.
// </auto-generated>
//----------------------

#nullable enable
namespace System.Windows.Forms.Natives;

#if NETCOREAPP3_1_OR_GREATER && ENABLE_LEGACY_MENUS
using System.Runtime.InteropServices;
using System.Security;

[SuppressUnmanagedCodeSecurity]
// System.Windows.Forms.UnsafeNativeMethods
internal static class UnsafeNativeMethods {
    [SuppressUnmanagedCodeSecurity]
    internal class ThemingScope {
        private struct ACTCTX {
            public int cbSize;

            public uint dwFlags;

            public string lpSource;

            public ushort wProcessorArchitecture;

            public ushort wLangId;

            public string lpAssemblyDirectory;

            public IntPtr lpResourceName;

            public string lpApplicationName;
        }

        private static ACTCTX enableThemingActivationContext;

        private static IntPtr hActCtx;

        private static bool contextCreationSucceeded;

        private const int ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID = 4;

        private const int ACTCTX_FLAG_RESOURCE_NAME_VALID = 8;

        private static bool IsContextActive() {
            IntPtr handle = IntPtr.Zero;
            if (contextCreationSucceeded && GetCurrentActCtx(out handle)) {
                return handle == hActCtx;
            }
            return false;
        }

        public static IntPtr Activate() {
            IntPtr lpCookie = IntPtr.Zero;
            if (Application.UseVisualStyles && contextCreationSucceeded && OSFeature.Feature.IsPresent(OSFeature.Themes) && !IsContextActive() && !ActivateActCtx(hActCtx, out lpCookie)) {
                lpCookie = IntPtr.Zero;
            }
            return lpCookie;
        }

        public static IntPtr Deactivate(IntPtr userCookie) {
            if (userCookie != IntPtr.Zero && OSFeature.Feature.IsPresent(OSFeature.Themes) && DeactivateActCtx(0, userCookie)) {
                userCookie = IntPtr.Zero;
            }
            return userCookie;
        }

        public static bool CreateActivationContext(string dllPath, int nativeResourceManifestID) {
            lock (typeof(ThemingScope)) {
                if (!contextCreationSucceeded && OSFeature.Feature.IsPresent(OSFeature.Themes)) {
                    enableThemingActivationContext = default(ACTCTX);
                    enableThemingActivationContext.cbSize = Marshal.SizeOf(typeof(ACTCTX));
                    enableThemingActivationContext.lpSource = dllPath;
                    enableThemingActivationContext.lpResourceName = (IntPtr)nativeResourceManifestID;
                    enableThemingActivationContext.dwFlags = 8u;
                    hActCtx = CreateActCtx(ref enableThemingActivationContext);
                    contextCreationSucceeded = hActCtx != new IntPtr(-1);
                }
                return contextCreationSucceeded;
            }
        }

        [DllImport("kernel32.dll")]
        private static extern IntPtr CreateActCtx(ref ACTCTX actctx);

        [DllImport("kernel32.dll")]
        private static extern bool ActivateActCtx(IntPtr hActCtx, out IntPtr lpCookie);

        [DllImport("kernel32.dll")]
        private static extern bool DeactivateActCtx(int dwFlags, IntPtr lpCookie);

        [DllImport("kernel32.dll")]
        private static extern bool GetCurrentActCtx(out IntPtr handle);
    }

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    public static extern IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, string? lParam);

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    public static extern IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, NativeMethods.TOOLINFO_T lParam);

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    public static extern IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, int lParam);

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    public static extern IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, int[] lParam);

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    public static extern IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, nint lParam);

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    public static extern IntPtr SendMessage(HandleRef hWnd, int msg, nint wParam, nint lParam);

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    public static extern IntPtr SendMessage(HandleRef hWnd, int msg, nint wParam, string lParam);

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    public static extern IntPtr SendMessage(HandleRef hWnd, int msg, nint wParam, ref NativeMethods.RECT lParam);

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    public static extern IntPtr GetMenu(HandleRef hWnd);

    [DllImport("user32.dll", EntryPoint = "GetMenuInfo", SetLastError = true, CharSet = CharSet.Auto)]
    internal static extern bool GetMenuInfo(nint hMenu, [In][Out] NativeMethods.MENUINFO_T lpcmi);

    [DllImport("user32.dll", EntryPoint = "SetMenuInfo", SetLastError = true, CharSet = CharSet.Auto)]
    internal static extern bool SetMenuInfo(nint hMenu, [In][Out] NativeMethods.MENUINFO_T lpcmi);

    [DllImport("user32.dll", EntryPoint = "SetMenuItemInfo", SetLastError = true, CharSet = CharSet.Auto)]
    internal static extern bool SetMenuInfo(nint hMenu, uint uItem, bool fByPosition, [In][Out] NativeMethods.MENUINFO_T lpmii);

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    public static extern bool GetMenuItemInfo(HandleRef hMenu, int uItem, bool fByPosition, [In][Out] NativeMethods.MENUITEMINFO_T lpmii);
    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    public static extern bool GetMenuItemInfo(HandleRef hMenu, int uItem, bool fByPosition, [In][Out] NativeMethods.MENUITEMINFO_T_RW lpmii);

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    public static extern bool SetMenuItemInfo(HandleRef hMenu, int uItem, bool fByPosition, NativeMethods.MENUITEMINFO_T lpmii);
    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    public static extern bool SetMenuItemInfo(HandleRef hMenu, int uItem, bool fByPosition, NativeMethods.MENUITEMINFO_T_RW lpmii);

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    public static extern bool InsertMenuItem(HandleRef hMenu, int uItem, bool fByPosition, NativeMethods.MENUITEMINFO_T lpmii);
    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    public static extern bool InsertMenuItem(HandleRef hMenu, int uItem, bool fByPosition, NativeMethods.MENUITEMINFO_T_RW lpmii);

    [DllImport("user32.dll", CharSet = CharSet.Auto, EntryPoint = "CreateMenu", ExactSpelling = true)]
    private static extern IntPtr IntCreateMenu();

    public static IntPtr CreateMenu() {
        return System.Internal.HandleCollector.Add(IntCreateMenu(), NativeMethods.CommonHandles.Menu);
    }

    [DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]
    public static extern int GetMenuItemID(HandleRef hMenu, int nPos);

    [DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]
    public static extern IntPtr GetSubMenu(HandleRef hwnd, int index);

    [DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]
    public static extern int GetMenuItemCount(HandleRef hMenu);

    [DllImport("user32.dll", CharSet = CharSet.Auto, EntryPoint = "GetDC", ExactSpelling = true)]
    private static extern IntPtr IntGetDC(HandleRef hWnd);

    public static IntPtr GetDC(HandleRef hWnd) {
        return System.Internal.HandleCollector.Add(IntGetDC(hWnd), NativeMethods.CommonHandles.HDC);
    }

    [DllImport("user32.dll", CharSet = CharSet.Auto, EntryPoint = "ReleaseDC", ExactSpelling = true)]
    private static extern int IntReleaseDC(HandleRef hWnd, HandleRef hDC);

    public static int ReleaseDC(HandleRef hWnd, HandleRef hDC) {
        System.Internal.HandleCollector.Remove((IntPtr)hDC, NativeMethods.CommonHandles.HDC);
        return IntReleaseDC(hWnd, hDC);
    }

    [DllImport("user32.dll", CharSet = CharSet.Auto, EntryPoint = "CreatePopupMenu", ExactSpelling = true)]
    private static extern IntPtr IntCreatePopupMenu();

    public static IntPtr CreatePopupMenu() {
        return System.Internal.HandleCollector.Add(IntCreatePopupMenu(), NativeMethods.CommonHandles.Menu);
    }

    [DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]
    public static extern bool RemoveMenu(HandleRef hMenu, int uPosition, int uFlags);

    [DllImport("user32.dll", CharSet = CharSet.Auto, EntryPoint = "DestroyMenu", ExactSpelling = true)]
    private static extern bool IntDestroyMenu(HandleRef hMenu);

    public static bool DestroyMenu(HandleRef hMenu) {
        System.Internal.HandleCollector.Remove((IntPtr)hMenu, NativeMethods.CommonHandles.Menu);
        return IntDestroyMenu(hMenu);
    }

    [DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]
    public static extern bool SetMenu(HandleRef hWnd, HandleRef hMenu);

    [DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]
    public static extern bool SetMenuDefaultItem(HandleRef hwnd, int nIndex, bool pos);
}
#endif
