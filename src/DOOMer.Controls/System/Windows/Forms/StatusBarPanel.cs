//----------------------
// <auto-generated>
//     Backwards compatibility with StatusBars.
// </auto-generated>
//----------------------

#nullable enable
namespace System.Windows.Forms;

#if NETCOREAPP3_1_OR_GREATER && ENABLE_LEGACY_MENUS
using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;
using System.Windows.Forms.Natives;

/// <summary>
///     Stores the <see cref='StatusBar'/> control panel's information.
/// </summary>
[ToolboxItem(false), DesignTimeVisible(false), DefaultProperty("Text")]
internal class StatusBarPanel : Component, ISupportInitialize {
    private const int DEFAULTWIDTH = 100;
    private const int DEFAULTMINWIDTH = 10;
    private const int PANELTEXTINSET = 3;
    private const int PANELGAP = 2;

    private string? text = "";
    private string name = "";
    private string? toolTipText = "";
    private Icon? icon = null;

    private HorizontalAlignment alignment = HorizontalAlignment.Left;
    private StatusBarPanelBorderStyle borderStyle = StatusBarPanelBorderStyle.Sunken;
    private StatusBarPanelStyle style = StatusBarPanelStyle.Text;

    // these are package scope so the parent can get at them.
    private StatusBar? parent = null;
    private int width = DEFAULTWIDTH;
    private int minWidth = DEFAULTMINWIDTH;
    private StatusBarPanelAutoSize autoSize = StatusBarPanelAutoSize.None;

    private bool initializing = false;

    /// <summary>
    ///     Initializes a new default instance of the <see cref='StatusBarPanel'/> class.
    /// </summary>
    public StatusBarPanel() { }

    /// <summary>
    ///     Gets or sets the <see cref='Alignment'/> property.
    /// </summary>
    [DefaultValue(HorizontalAlignment.Left), Localizable(true)]
    public HorizontalAlignment Alignment {
        get => this.alignment;
        set {
            //valid values are 0x0 to 0x2
            if (!ClientUtils.IsEnumValid(value, (int)value, (int)HorizontalAlignment.Left, (int)HorizontalAlignment.Center)) {
                throw new InvalidEnumArgumentException("value", (int)value, typeof(HorizontalAlignment));
            }
            if (this.alignment != value) {
                this.alignment = value;
                this.Realize();
            }
        }
    }

    /// <summary>
    ///     Gets or sets the <see cref='AutoSize'/> property.
    /// </summary>
    [DefaultValue(StatusBarPanelAutoSize.None), RefreshProperties(RefreshProperties.All)]
    public StatusBarPanelAutoSize AutoSize {
        get => this.autoSize;
        set {
            //valid values are 0x1 to 0x3
            if (!ClientUtils.IsEnumValid(value, (int)value, (int)StatusBarPanelAutoSize.None, (int)StatusBarPanelAutoSize.Contents)) {
                throw new InvalidEnumArgumentException("value", (int)value, typeof(StatusBarPanelAutoSize));
            }
            if (this.autoSize != value) {
                this.autoSize = value;
                this.UpdateSize();
            }
        }
    }

    /// <summary>
    ///     Gets or sets the <see cref='BorderStyle'/> property.
    /// </summary>
    [DefaultValue(StatusBarPanelBorderStyle.Sunken), DispId(NativeMethods.ActiveX.DISPID_BORDERSTYLE)]
    public StatusBarPanelBorderStyle BorderStyle {
        get => this.borderStyle;
        set {
            //valid values are 0x1 to 0x3
            if (!ClientUtils.IsEnumValid(value, (int)value, (int)StatusBarPanelBorderStyle.None, (int)StatusBarPanelBorderStyle.Sunken)) {
                throw new InvalidEnumArgumentException("value", (int)value, typeof(StatusBarPanelBorderStyle));
            }
            if (this.borderStyle != value) {
                this.borderStyle = value;
                this.Realize();
                if (this.Created) {
                    this.parent.Invalidate();
                }
            }
        }
    }

    /// <internalonly/>
    [MemberNotNullWhen(true, nameof(parent))]
    internal bool Created => this.parent?.ArePanelsRealized() == true;

    /// <summary>
    ///     Gets or sets the <see cref='Icon'/> property.
    /// </summary>
    [DefaultValue(null), Localizable(true)]
    public Icon? Icon {
        [ResourceExposure(ResourceScope.Machine)]
        // unfortunately we have no way of getting the icon from the control.
        get => this.icon;
        [ResourceExposure(ResourceScope.Machine)]
        [ResourceConsumption(ResourceScope.Machine)]
        set {
            if (value != null && (((Icon)value).Height > SystemInformation.SmallIconSize.Height || ((Icon)value).Width > SystemInformation.SmallIconSize.Width)) {
                this.icon = new Icon(value, SystemInformation.SmallIconSize);
            }
            else {
                this.icon = value;
            }

            if (this.Created) {
                IntPtr handle = (this.icon == null) ? IntPtr.Zero : this.icon.Handle;
                UnsafeNativeMethods.SendMessage(new HandleRef(this, this.parent.Handle), NativeMethods.SB_SETICON, (IntPtr)this.GetIndex(), handle);
                //this.parent.SendMessage(NativeMethods.SB_SETICON, (IntPtr)GetIndex(), handle);

            }
            this.UpdateSize();
            if (this.Created) {
                this.parent.Invalidate();
            }
        }
    }

    /// <summary>
    ///     Expose index internally
    /// </summary>
    internal int Index { get; set; }

    /// <summary>
    ///     Gets or sets the minimum width the <see cref='StatusBarPanel'/> can be within the <see cref='StatusBar'/> control.
    /// </summary>
    [DefaultValue(DEFAULTMINWIDTH), Localizable(true), RefreshProperties(RefreshProperties.All)]
    public int MinWidth {
        get => this.minWidth;
        set {
            if (value < 0) {
                throw new ArgumentOutOfRangeException(nameof(this.MinWidth), "Minimum width cannot be less-than 0.");
            }

            if (value != this.minWidth) {
                this.minWidth = value;

                this.UpdateSize();
                if (this.minWidth > this.Width) {
                    this.Width = value;
                }
            }
        }
    }

    /// <summary>
    ///     Gets or sets the name of the panel.
    /// </summary>
    [Localizable(true)]
    public string Name {
        get => WindowsFormsUtils.GetComponentName(this, this.name);
        set {
            this.name = value;
            if (this.Site != null) {
                this.Site.Name = this.name;
            }
        }
    }

    /// <summary>
    ///     Represents the <see cref='StatusBar'/> control which hosts the panel.
    /// </summary>
    [Browsable(false)]
    public StatusBar? Parent => this.parent;

    /// <summary>
    ///     Expose a direct setter for parent internally
    /// </summary>
    internal StatusBar? ParentInternal {
        set => this.parent = value;
    }

    /// <summary>
    ///     Expose right internally
    /// </summary>
    internal int Right { get; set; }

    /// <summary>
    ///     Gets or sets the style of the panel.
    /// </summary>
    [DefaultValue(StatusBarPanelStyle.Text)]
    public StatusBarPanelStyle Style {
        get => this.style;
        set {
            //valid values are 0x1 to 0x2
            if (!ClientUtils.IsEnumValid(value, (int)value, (int)StatusBarPanelStyle.Text, (int)StatusBarPanelStyle.OwnerDraw)) {
                throw new InvalidEnumArgumentException("value", (int)value, typeof(StatusBarPanelStyle));
            }
            if (this.style != value) {
                this.style = value;
                this.Realize();
                if (this.Created) {
                    this.parent.Invalidate();
                }
            }
        }
    }

    [Localizable(false), Bindable(true), DefaultValue(null), TypeConverter(typeof(StringConverter))]
    public object? Tag { get; set; }

    /// <summary>
    ///     Gets or sets the text of the panel.
    /// </summary>
    [Localizable(true), DefaultValue("")]
    public string Text {
        get => this.text ?? "";
        set {
            value ??= "";

            if (!this.Text.Equals(value)) {
                if (value.Length == 0) {
                    this.text = null;
                }
                else {
                    this.text = value;
                }
                this.Realize();
                this.UpdateSize();
            }
        }
    }

    /// <summary>
    ///     Gets or sets the panel's tool tip text.
    /// </summary>
    [Localizable(true), DefaultValue("")]
    public string ToolTipText {
        get => this.toolTipText ?? "";
        set {
            value ??= "";

            if (!this.ToolTipText.Equals(value)) {
                if (value.Length == 0) {
                    this.toolTipText = null;
                }
                else {
                    this.toolTipText = value;
                }

                if (this.Created) {
                    this.parent.UpdateTooltip(this);
                }
            }
        }
    }

    /// <summary>
    ///     Gets or sets the width of the <see cref='StatusBarPanel'/> within the <see cref='StatusBar'/> control.
    /// </summary>
    [Localizable(true), DefaultValue(DEFAULTWIDTH)]
    public int Width {
        get => this.width;
        set {
            if (!this.initializing && value < this.minWidth) {
                throw new ArgumentOutOfRangeException("Width", "Width is greater-than minimum width.");
            }

            this.width = value;
            this.UpdateSize();
        }
    }

    /// <summary>
    ///      Handles tasks required when the control is being initialized.
    /// </summary>
    public void BeginInit() {
        this.initializing = true;
    }

    /// <internalonly/>
    protected override void Dispose(bool disposing) {
        if (disposing) {
            if (this.parent != null) {
                int index = this.GetIndex();
                if (index != -1) {
                    this.parent.Panels.RemoveAt(index);
                }
            }
        }
        base.Dispose(disposing);
    }

    /// <summary>
    ///      Called when initialization of the control is complete.
    /// </summary>
    public void EndInit() {
        this.initializing = false;

        if (this.Width < this.MinWidth) {
            this.Width = this.MinWidth;
        }
    }

    /// <internalonly/>
    /// <summary>
    ///     Gets the width of the contents of the panel
    /// </summary>
    internal int GetContentsWidth(bool newPanel) {
        string text;
        if (newPanel) {
            text = this.text ?? "";
        }
        else {
            text = this.Text;
        }

        //Graphics g = this.parent.CreateGraphicsInternal();
        Graphics g = this.parent!.CreateGraphics();
        Size sz = Size.Ceiling(g.MeasureString(text, this.parent.Font));
        if (this.icon != null) {
            sz.Width += this.icon.Size.Width + 5;
        }
        g.Dispose();

        int width = sz.Width + (SystemInformation.BorderSize.Width * 2) + (PANELTEXTINSET * 2) + PANELGAP;
        return Math.Max(width, this.minWidth);
    }

    /// <internalonly/>
    /// <summary>
    ///     Returns the index of the panel by making the parent control search for it within its list.
    /// </summary>
    private int GetIndex() {
        return this.Index;
    }

    /// <internalonly/>
    /// <summary>
    ///     Sets all the properties for this panel.
    /// </summary>
    internal void Realize() {
        if (this.Created) {
            string text;
            int border = 0;

            text = this.text ?? "";

            HorizontalAlignment align = this.alignment;
            // Translate the alignment for Rtl apps
            //
            if (this.parent.RightToLeft == RightToLeft.Yes) {
                switch (align) {
                    case HorizontalAlignment.Left:
                        align = HorizontalAlignment.Right;
                        break;
                    case HorizontalAlignment.Right:
                        align = HorizontalAlignment.Left;
                        break;
                }
            }

            string sendText = align switch {
                HorizontalAlignment.Center => "\t" + text,
                HorizontalAlignment.Right => "\t\t" + text,
                _ => text,
            };

            switch (this.borderStyle) {
                case StatusBarPanelBorderStyle.None:
                    border |= NativeMethods.SBT_NOBORDERS;
                    break;
                case StatusBarPanelBorderStyle.Sunken:
                    break;
                case StatusBarPanelBorderStyle.Raised:
                    border |= NativeMethods.SBT_POPOUT;
                    break;
            }

            switch (this.style) {
                case StatusBarPanelStyle.Text:
                    break;
                case StatusBarPanelStyle.OwnerDraw:
                    border |= NativeMethods.SBT_OWNERDRAW;
                    break;
            }

            int wparam = this.GetIndex() | border;
            if (this.parent.RightToLeft == RightToLeft.Yes) {
                wparam |= NativeMethods.SBT_RTLREADING;
            }

            int result = (int)UnsafeNativeMethods.SendMessage(new HandleRef(this.parent, this.parent.Handle), NativeMethods.SB_SETTEXT, (IntPtr)wparam, sendText);

            if (result == 0) {
                throw new InvalidOperationException("Unable to set the panel text.");
            }

            if (this.icon != null && this.style != StatusBarPanelStyle.OwnerDraw) {
                UnsafeNativeMethods.SendMessage(new HandleRef(this, this.parent.Handle), NativeMethods.SB_SETICON, (IntPtr)this.GetIndex(), this.icon.Handle);
                //this.parent.SendMessage(NativeMethods.SB_SETICON, (IntPtr)GetIndex(), this.icon.Handle);
            }
            else {
                UnsafeNativeMethods.SendMessage(new HandleRef(this, this.parent.Handle), NativeMethods.SB_SETICON, (IntPtr)this.GetIndex(), IntPtr.Zero);
                //this.parent.SendMessage(NativeMethods.SB_SETICON, (IntPtr)GetIndex(), IntPtr.Zero);
            }

            if (this.style == StatusBarPanelStyle.OwnerDraw) {
                NativeMethods.RECT rect = new();
                result = (int)UnsafeNativeMethods.SendMessage(new HandleRef(this.parent, this.parent.Handle), NativeMethods.SB_GETRECT, (IntPtr)this.GetIndex(), ref rect);

                if (result != 0) {
                    this.parent.Invalidate(Rectangle.FromLTRB(rect.left, rect.top, rect.right, rect.bottom));
                }
            }
        }
    }

    private void UpdateSize() {
        if (this.autoSize == StatusBarPanelAutoSize.Contents) {
            this.ApplyContentSizing();
        }
        else {
            if (this.Created) {
                this.parent.DirtyLayout();
                this.parent.PerformLayout();
            }
        }
    }

    private void ApplyContentSizing() {
        if (this.autoSize == StatusBarPanelAutoSize.Contents &&
            this.parent != null) {
            int newWidth = this.GetContentsWidth(false);
            if (newWidth != this.Width) {
                this.Width = newWidth;
                if (this.Created) {
                    this.parent.DirtyLayout();
                    this.parent.PerformLayout();
                }
            }
        }
    }

    /// <summary>
    ///     Retrieves a string that contains information about the panel.
    /// </summary>
    public override string ToString() {
        return "StatusBarPanel: {" + this.Text + "}";
    }
}
#endif
